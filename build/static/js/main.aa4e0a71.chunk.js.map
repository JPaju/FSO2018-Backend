{"version":3,"sources":["components/ContactForm.js","components/Contact.js","components/PhoneBook.js","components/FilterForm.js","components/Notification.jsx","services/contacts.js","index.js"],"names":["ContactForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","type","event","newValue","state","value","target","setState","onSubmit","preventDefault","onSubmitCallback","nimi","numero","render","react_default","a","createElement","onChange","placeholder","buttonText","placeHolder","fields","React","Component","defaultProps","Contact","_ref","contact","deleteContact","name","number","onClick","PhoneBook","contacts","filter","toLowerCase","startsWith","length","map","components_Contact","key","id","FilterForm","onChangeCallback","Notification","message","className","baseUrl","services_contacts","getAll","axios","get","then","response","data","concat","create","newObject","post","update","put","remove","delete","console","log","App","addContact","newPerson","isDuplicate","window","confirm","find","c","contactService","fetchContacts","catch","err","createContact","addNotification","newContact","removeContact","contactToCheck","time","error","setTimeout","filterContacts","componentDidMount","components_FilterForm","components_Notification","components_ContactForm","components_PhoneBook","ReactDOM","src_App","document","getElementById"],"mappings":"kOAEMA,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaVQ,gBAAkB,SAACC,GAAD,OAAU,SAACC,GACrB,IAAMC,EAAWV,EAAKW,MAAMC,MAC5BF,EAASF,GAAQC,EAAMI,OAAOD,MAC9BZ,EAAKc,SAAS,CAAEF,MAAOF,MAjBZV,EAoBnBe,SAAW,SAACN,GACRA,EAAMO,iBACNhB,EAAKiB,iBAAiBjB,EAAKW,MAAMC,OACjCZ,EAAKc,SAAS,CAAEF,MAAO,CAACM,KAAM,GAAIC,OAAQ,OAvB3BnB,EA0BnBoB,OAAS,kBACLC,EAAAC,EAAAC,cAAA,QAAMR,SAAUf,EAAKe,UACjBM,EAAAC,EAAAC,cAAA,SACIX,MAAOZ,EAAKW,MAAMC,MAAMM,KACxBM,SAAUxB,EAAKO,gBAAgB,QAC/BkB,YAAY,SAChBJ,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SACIX,MAAOZ,EAAKW,MAAMC,MAAMO,OACxBK,SAAUxB,EAAKO,gBAAgB,UAC/BkB,YAAY,WAChBJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQf,KAAK,UAAUR,EAAK0B,cArChC1B,EAAKiB,iBAAmBlB,EAAMkB,iBAC9BjB,EAAK2B,YAAc5B,EAAM4B,YACzB3B,EAAK0B,WAAa3B,EAAM2B,WACxB1B,EAAK4B,OAAS7B,EAAM6B,OACpB5B,EAAKW,MAAQ,CACTC,MAAO,CACHM,KAAM,GACNC,OAAQ,KATDnB,6BADG6B,IAAMC,WA6ChChC,EAAYiC,aAAe,CACvBL,WAAY,SACZC,YAAa,SAGF7B,QCtCAkC,EAZC,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAASC,EAAXF,EAAWE,cAAX,OACZd,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKW,EAAQE,MACbf,EAAAC,EAAAC,cAAA,UAAKW,EAAQG,QACbhB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQe,QAASH,GAAjB,aCkBGI,EArBG,SAAAN,GAAyC,IAAtCO,EAAsCP,EAAtCO,SAAUC,EAA4BR,EAA5BQ,OAAQN,EAAoBF,EAApBE,cAkBnC,OAhBAK,EAAWA,EAASC,OAAO,SAAAP,GAAO,OAAIA,EAAQE,KAAKM,cAAcC,WAAWF,EAAOC,kBAEnDE,OAAS,EACrCvB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACKiB,EAASK,IAAI,SAAAX,GAAO,OACjBb,EAAAC,EAAAC,cAACuB,EAAD,CACIC,IAAKb,EAAQE,KAAOF,EAAQG,OAC5BH,QAASA,EACTC,cAAeA,EAAcD,EAAQc,UAKrD,gCCJOC,EAdI,SAAAhB,GAA0B,IAAvBiB,EAAuBjB,EAAvBiB,iBAMlB,OACI7B,EAAAC,EAAAC,cAAA,SACIC,SANS,SAACf,GACdyC,EAAiBzC,EAAMI,OAAOD,QAM1Ba,YAAY,gCCET0B,EAXM,SAAAlB,GAAiB,IAAdmB,EAAcnB,EAAdmB,QACpB,OAAgB,OAAZA,EACO,KAGP/B,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,gBACVD,oBCNPE,EAAU,4CA0BDC,EAAA,CAAEC,OAxBF,kBACXC,IAAMC,IAAIJ,GACLK,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAsBVH,IAnBb,SAACV,GAAD,OACRS,IAAMC,IAAN,GAAAI,OAAaR,EAAb,KAAAQ,OAAwBd,KAkBEe,OAff,SAACC,GAAD,OACXP,IAAMQ,KAAKX,EAASU,GACfL,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAaGK,OAVvB,SAAClB,EAAIgB,GAAL,OACXP,IAAMU,IAAN,GAAAL,OAAaR,EAAb,KAAAQ,OAAwBd,GAAMgB,GACzBL,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQWO,OAL/B,SAACpB,GAAD,OACXS,IAAMY,OAAN,GAAAP,OAAgBR,EAAhB,KAAAQ,OAA2Bd,IACtBW,KAAK,SAAAC,GAAQ,OAAIU,QAAQC,IAAR,0BAAAT,OAAsCd,QCf1DwB,qBACF,SAAAA,EAAYzE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqE,IACfxE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuE,GAAAlE,KAAAH,KAAMJ,KAQV0E,WAAa,SAACvC,GACV,IAAMwC,EAAY,CACdtC,KAAMF,EAAQhB,KACdmB,OAAQH,EAAQf,QAGpB,GAAInB,EAAK2E,YAAYD,IACjB,GAAIE,OAAOC,QAAP,IAAAf,OAAmBY,EAAUtC,KAA7B,qDAAsF,CACtF,IAAMY,EAAKhD,EAAKW,MAAM6B,SAASsC,KAAK,SAAAC,GAAC,OAAIA,EAAE3C,OAASsC,EAAUtC,OAAMY,GAMpE,OALAgC,EAAed,OAAOlB,EAAI0B,GACrBf,KAAK,SAAAC,GAAQ,OAAI5D,EAAKiF,kBACtBC,MAAM,SAAAC,GACHnF,EAAKoF,cAAcV,KAEpB1E,EAAKqF,gBAAL,+BAAAvB,OACsBY,EAAUtC,KADhC,eAAA0B,OACkDY,EAAUrC,QAAU,SAK5EqC,EAAUtC,MAAUsC,EAAUrC,QAG/BrC,EAAKoF,cAAcV,GACnB1E,EAAKqF,gBAAL,2BAAAvB,OACyBY,EAAUtC,KADnC,cAAA0B,OACoDY,EAAUrC,QAAU,IAJxErC,EAAKqF,gBAAgB,8BAAyB,IA9BvCrF,EAwCnBoF,cAAgB,SAACE,GAAD,OACZN,EAAejB,OAAOuB,GACjB3B,KAAK,SAAAC,GAAQ,OAAI5D,EAAKiF,mBA1CZjF,EA6CnBuF,cAAgB,SAACvC,GAAD,OAAQ,WACpB,IAAMZ,EAAOpC,EAAKW,MAAM6B,SACnBsC,KAAK,SAAA5C,GAAO,OAAIA,EAAQc,KAAOA,IAAIZ,KAEpCwC,OAAOC,QAAP,gBAAAf,OAA+B1B,EAA/B,OACA4C,EAAeZ,OAAOpB,GACjBW,KAAK,SAAAC,GAAQ,OAAI5D,EAAKiF,kBACtBC,MAAM,SAAAC,GAAG,OAAIb,QAAQC,IAAIY,OApDnBnF,EAwDnB2E,YAAc,SAACa,GAAD,OACVxF,EAAKW,MAAM6B,SAASsC,KAAK,SAAC5C,GAAD,OAAaA,EAAQE,OAASoD,EAAepD,QAzDvDpC,EA4DnBqF,gBAAkB,SAACjC,EAASqC,GACxBzF,EAAKc,SAAS,CAAE4E,MAAOtC,IACvBuC,WAAW,WACP3F,EAAKc,SAAS,CAAE4E,MAAO,QACjB,IAAPD,IAhEYzF,EAmEnB4F,eAAiB,SAACnD,GACdzC,EAAKc,SAAS,CAAE2B,OAAQA,KApETzC,EAuEnBiF,cAAgB,WACZD,EAAexB,SACVG,KAAK,SAAAnB,GAAQ,OAAIxC,EAAKc,SAAS,CAAE0B,eACjC0C,MAAM,SAAAC,GAAG,OAAIb,QAAQC,IAAIY,MA1EfnF,EA6EnB6F,kBAAoB,kBAAM7F,EAAKiF,iBA3E3BjF,EAAKW,MAAQ,CACT6B,SAAU,GACVC,OAAQ,GACRiD,MAAO,MALI1F,wEAgFf,OACIqB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6BAEAF,EAAAC,EAAAC,cAAA,sDACAF,EAAAC,EAAAC,cAACuE,EAAD,CAAY5C,iBAAkB/C,KAAKyF,iBAEnCvE,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAACwE,EAAD,CAAc3C,QAASjD,KAAKQ,MAAM+E,QAElCrE,EAAAC,EAAAC,cAACyE,EAAD,CACI/E,iBAAkBd,KAAKsE,WACvB/C,WAAW,gBACbL,EAAAC,EAAAC,cAAA,WAEFF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAC0E,EAAD,CACIzD,SAAUrC,KAAKQ,MAAM6B,SACrBC,OAAQtC,KAAKQ,MAAM8B,OACnBN,cAAehC,KAAKoF,wBApGtB1D,IAAMC,YA2GxBoE,IAAS9E,OAAOC,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.aa4e0a71.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass ContactForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.onSubmitCallback = props.onSubmitCallback\r\n        this.placeHolder = props.placeHolder\r\n        this.buttonText = props.buttonText\r\n        this.fields = props.fields\r\n        this.state = {\r\n            value: {\r\n                nimi: '',\r\n                numero: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    onChangeHandler = (type) => (event) => {\r\n            const newValue = this.state.value\r\n            newValue[type] = event.target.value\r\n            this.setState({ value: newValue})\r\n    }\r\n    \r\n    onSubmit = (event) => {\r\n        event.preventDefault()\r\n        this.onSubmitCallback(this.state.value)\r\n        this.setState({ value: {nimi: '', numero: ''} })\r\n    }\r\n\r\n    render = () => (\r\n        <form onSubmit={this.onSubmit}>\r\n            <input\r\n                value={this.state.value.nimi}\r\n                onChange={this.onChangeHandler('nimi')}\r\n                placeholder='Nimi' />\r\n            <br />\r\n\r\n            <input\r\n                value={this.state.value.numero}\r\n                onChange={this.onChangeHandler('numero')}\r\n                placeholder='Numero' />\r\n            <br />\r\n            <button type='submit'>{this.buttonText}</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nContactForm.defaultProps = {\r\n    buttonText: 'Submit',\r\n    placeHolder: 'Value',\r\n}\r\n\r\nexport default ContactForm","import React from 'react'\r\n\r\nconst Contact = ({contact, deleteContact}) => (\r\n    <tr>\r\n        <td>{contact.name}</td>\r\n        <td>{contact.number}</td>\r\n        <td>\r\n            <button onClick={deleteContact}>\r\n                Poista\r\n            </button>\r\n        </td>\r\n    </tr>\r\n)\r\n\r\nexport default Contact","import React from 'react'\r\nimport Contact from './Contact'\r\n\r\n\r\nconst PhoneBook = ({ contacts, filter, deleteContact }) => {\r\n\r\n    contacts = contacts.filter(contact => contact.name.toLowerCase().startsWith(filter.toLowerCase()))\r\n\r\n    const contactsToShow = contacts.length > 0 ?\r\n        <table>\r\n            <tbody>\r\n                {contacts.map(contact =>\r\n                    <Contact\r\n                        key={contact.name + contact.number}\r\n                        contact={contact}\r\n                        deleteContact={deleteContact(contact.id)}\r\n                    />)}\r\n            </tbody>\r\n        </table>\r\n        :\r\n        'Ei yhtään yhteystietoa'\r\n\r\n    return contactsToShow\r\n}\r\n\r\nexport default PhoneBook","import React from 'react'\r\n\r\nconst FilterForm = ({ onChangeCallback }) => {\r\n\r\n    const onChange = (event) => {\r\n        onChangeCallback(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <input\r\n            onChange={onChange}\r\n            placeholder='Rajaa näytettäviä' />\r\n    )\r\n\r\n}\r\n\r\nexport default FilterForm","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null)\r\n        return null\r\n\r\n    return (\r\n        <div className=\"notification\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n\r\nconst baseUrl = 'https://fso2018.herokuapp.com/api/persons'\r\n\r\nconst getAll = () => (\r\n    axios.get(baseUrl)\r\n        .then(response => response.data)\r\n)\r\n\r\nconst get = (id) => (\r\n    axios.get(`${baseUrl}/${id}`)\r\n)\r\n\r\nconst create = (newObject) => (\r\n    axios.post(baseUrl, newObject)\r\n        .then(response => response.data)\r\n)\r\n\r\nconst update = (id, newObject) => (\r\n    axios.put(`${baseUrl}/${id}`, newObject)\r\n        .then(response => response.data)\r\n)\r\n\r\nconst remove = (id) => (\r\n    axios.delete(`${baseUrl}/${id}`)\r\n        .then(response => console.log(`Removed person with id ${id}`))\r\n)\r\n\r\nexport default { getAll, get, create, update, remove }","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport ContactForm from './components/ContactForm'\r\nimport PhoneBook from './components/PhoneBook'\r\nimport FilterForm from './components/FilterForm'\r\nimport Notification from './components/Notification'\r\nimport contactService from './services/contacts'\r\nimport './index.css'\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            contacts: [],\r\n            filter: '',\r\n            error: null\r\n        }\r\n    }\r\n\r\n    addContact = (contact) => {\r\n        const newPerson = {\r\n            name: contact.nimi,\r\n            number: contact.numero\r\n        }\r\n\r\n        if (this.isDuplicate(newPerson)) {\r\n            if (window.confirm(`\"${newPerson.name}\" on jo luettelossa, korvataanko numero uudella?`)) {\r\n                const id = this.state.contacts.find(c => c.name === newPerson.name).id\r\n                contactService.update(id, newPerson)\r\n                    .then(response => this.fetchContacts())\r\n                    .catch(err => {\r\n                        this.createContact(newPerson)\r\n                    })\r\n                return this.addNotification(\r\n                    `Päivitettiin henkilön ${newPerson.name} numeroksi ${newPerson.number}`, 5)\r\n            }\r\n        } else {\r\n            //Ensure that both name and number is provided\r\n            //if not, display notification\r\n            if (!newPerson.name || ! newPerson.number) {\r\n                this.addNotification('Syötä nimi JA numero!', 5)\r\n            } else {\r\n                this.createContact(newPerson)\r\n                this.addNotification(\r\n                    `Lisättiin henkilö ${newPerson.name}, numero: ${newPerson.number}`, 5)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    createContact = (newContact) => (\r\n        contactService.create(newContact)\r\n            .then(response => this.fetchContacts())\r\n    )\r\n\r\n    removeContact = (id) => () => {\r\n        const name = this.state.contacts\r\n            .find(contact => contact.id === id).name\r\n\r\n        if (window.confirm(`Poistetaanko ${name}?`)) {\r\n            contactService.remove(id)\r\n                .then(response => this.fetchContacts())\r\n                .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    isDuplicate = (contactToCheck) => (\r\n        this.state.contacts.find((contact) => contact.name === contactToCheck.name)\r\n    )\r\n\r\n    addNotification = (message, time) => {\r\n        this.setState({ error: message })\r\n        setTimeout(() => {\r\n            this.setState({ error: null })\r\n        }, time * 1000)\r\n    }\r\n\r\n    filterContacts = (filter) => {\r\n        this.setState({ filter: filter })\r\n    }\r\n\r\n    fetchContacts = () => {\r\n        contactService.getAll()\r\n            .then(contacts => this.setState({ contacts }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    componentDidMount = () => this.fetchContacts()\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Puhelinluettelo</h1>\r\n\r\n                <h2>Rajaa näytettäviä yhteystietoja</h2>\r\n                <FilterForm onChangeCallback={this.filterContacts} />\r\n\r\n                <h2>Lisää uusi yhteystieto</h2>\r\n                <Notification message={this.state.error} />\r\n\r\n                <ContactForm\r\n                    onSubmitCallback={this.addContact}\r\n                    buttonText='Lisää'\r\n                /><br />\r\n\r\n                <h2>Yhteystiedot</h2>\r\n                <PhoneBook\r\n                    contacts={this.state.contacts}\r\n                    filter={this.state.filter}\r\n                    deleteContact={this.removeContact} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}